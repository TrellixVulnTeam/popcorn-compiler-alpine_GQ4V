ABBRV. Table
---------------
ST         : Stack Transformation
ENV. VAR.  : Environment Variables 
ARCH.      : Architecture
RW_CTX     : Rewriting context
RA         : Return Address
---------------

############################################################### arch_regs.h:
architecture specific internal.h

## bitmap.h:
Defines a bitmap to store callee-saved registers

**** Contents:
bitmap bitmap_init(size_t size);
void bitmap_free(bitmap bitmap);
STORAGE_TYPE_BITS (sizeof(STORAGE_TYPE) * 8)
#define bitmap_size(num)
#define bitmap_set(bitmap, num)
#define bitmap_set_all(bitmap)
#define bitmap_clear(bitmap, num)
#define bitmap_clear_all(bitmap)
#define bitmap_is_set(bitmap, num)

############################################################### config.h:
Stack transformation runtime configuration
Enabling debugging, setting log file,
choosing function for timing and TLS implementation
as well as defining 
 -- max frame and buffer size for ST
 -- Names of ELF sections containing stack transformation unwind & call site meta-data
 -- ENV. VAR. specifying ARCH. binary names
 -- Stack limits


**** Contents:
#define _CONFIG_H
#define LOG_FILE "stack-transform.log"
#define CLOCK_GETTIME 0
#define GETTIMEOFDAY 1
#define _TIMER_SRC CLOCK_GETTIME // musl-libc has vDSO versions for both archs
#define COMPILER_TLS 0
#define PTHREAD_TLS 1
#define _TLS_IMPL PTHREAD_TLS
#define MAX_FRAMES 512
#define BUF_SIZE 512
#define SECTION_ST_UNWIND_ADDR SECTION_PREFIX "." SECTION_UNWIND_ADDR
#define SECTION_ST_UNWIND SECTION_PREFIX "." SECTION_UNWIND
#define SECTION_ST_ID SECTION_PREFIX "." SECTION_ID
#define SECTION_ST_ADDR SECTION_PREFIX "." SECTION_ADDR
#define SECTION_ST_LIVE SECTION_PREFIX "." SECTION_LIVE
#define SECTION_ST_ARCH_LIVE SECTION_PREFIX "." SECTION_ARCH
#define ENV_AARCH64_BIN "ST_AARCH64_BIN"
#define ENV_X86_64_BIN "ST_X86_64_BIN"
#define MAX_STACK_SIZE (8UL * 1024UL * 1024UL)
#define B_STACK_OFFSET (4 * 1024 * 1024)

############################################################### data.h:
APIs for accessing frame-specific data, i.e. live values, return address and saved frame pointer location

**** Contents:
void put_val(rewrite_context src,const call_site_value* src_val, rewrite_context dest,const call_site_value* dest_val);
void put_val_arch(rewrite_context ctx, const arch_const_value *val);
void put_val_data(rewrite_context ctx,const call_site_value* val,int act,uint64_t data);
void* points_to_stack(const rewrite_context ctx, const call_site_value* val);
void* points_to_data(const rewrite_context src,const call_site_value* src_val,const rewrite_context dest,const call_site_value* dest_val,void* src_ptr);
uint64_t* get_savedfbp_loc(rewrite_context ctx);

############################################################### definitions.h:
Library-internal definitions & includes
heck, debug, log file, assertions
Value_size, fixup for pointer-to-value
activation, ST handle, rewriting context


NOTE #1: I'm skipping most define directives since they're long and not interesting
NOTE #2: Right handside gives the name struct is typedef'ed to.
**** Contents:
typedef struct fixup                                     : fixup
typedef struct activation                                : activation
struct _st_handle                      
typedef struct _st_handle* st_handle;                    : st_handle
struct rewrite_context
typedef struct rewrite_context* rewrite_context;         : rewrite_context
define_list_type(fixup);
define ACT( ctx ) ctx->acts[ctx->act]
#define PREV_ACT( ctx ) ctx->acts[ctx->act - 1]
#define NEXT_ACT( ctx ) ctx->acts[ctx->act + 1]
#define REGOPS( ctx ) ctx->handle->regops
#define PROPS( ctx ) ctx->handle->props


activation contains
 -- call site
 -- cfa
 -- register set
 -- callee-saved registers

st_handle contains
 -- ELF info
 -- ARCH. info
 -- ARCH.-specific register access operations & stack properties
 -- unwinding information
 -- call site information

rewrite_context contains 
 -- st_handle
 -- transformation results (in the form of pointers to stack)
 -- activations
 -- registers


############################################################### list.h:
Contains a linked list implementation. Can do only forward traversal and requires no sorting


############################################################### properties.h:
Per-architecture stack properties
Contains information about
 -- SP alignment
 -- callee-saved registers
 -- cfa offset

**** Contents:
properties_t

############################################################### regs.h:
The base register set type, which provides architecture-agnostic data and
the functional interface.  Architecture-specific implementations will add
their own register sets and provide implementations of the functions.

**** Contents:
struct regset_t
typedef struct regset_t* regset_t;  
typedef const struct regset_t* const_regset_t;
struct regops_t
typedef struct regops_t* regops_t;
typedef const struct regops_t* const_regops_t;


It has
regset_t to do sanity checks. It contains only a bool named initialized
regops_t contains
 -- num of regs
 -- has_ra_reg // for RA
 -- regset_size
 -- ctors & dtors
 -- functions for special registers like pc, fbp, sp and ra_reg


############################################################### stack_transformation.h:
The public API for the stack transformation runtime

**** Contents:
typedef struct _st_handle* st_handle
typedef struct stack_bounds                   : stack_bounds
void st_destroy(st_handle handle);
stack_bounds get_stack_bounds();
st_handle st_init(const char* fn);
int st_userspace_rewrite(void* sp, void* regs, void* dest_regs);
int st_userspace_rewrite_aarch64(void* sp,struct regset_aarch64* regs, struct regset_aarch64* dest_regs);
int st_userspace_rewrite_x86_64(void* sp,struct regset_x86_64* regs, struct regset_x86_64* dest_regs);
int st_rewrite_stack(st_handle src, void* regset_src, void* sp_base_src, st_handle dest, void* regset_dest, * sp_base_dest);
int st_rewrite_ondemand(st_handle src, void* regset_src, void* sp_base_src, st_handle dest, void* regset_dest, * sp_base_dest);


############################################################### timer.h:
Timing infrastructure, including timer declarations/definitions & APIs

**** Contents:
#define _TIMER_H
#define COARSE_TIMERS \
  X(st_init) \
  X(st_destroy) \
  X(st_rewrite_stack) \
  X(init_src_context) \
  X(init_dest_context) \
  X(unwind_and_size) \
  X(rewrite_stack) \
  X(free_context)

#define FINE_TIMERS \
  X(rewrite_frame) \
  X(pop_frame) \
  X(put_val) \
  X(get_site_by_addr) \
  X(get_site_by_id) \
  X(get_unwind_offset_by_addr)

#if defined(_TIMING) && defined(_FINE_GRAINED_TIMING)
# define ALL_TIMERS COARSE_TIMERS FINE_TIMERS
#elif defined (_TIMING)
# define ALL_TIMERS COARSE_TIMERS FINE_TIMERS
# define ALL_TIMERS
# define X( timer_name ) extern timer __timer_##timer_name;
# define TIMER_START( timer_name ) st_timer_start(__timer_##timer_name)
# define TIMER_STOP( timer_name ) st_timer_stop_and_accum(__timer_##timer_name)
# define TIMER_RESET( timer_name ) st_timer_reset(__timer_##timer_name)
# define TIMER_ELAPSED( timer_name ) st_timer_get_elapsed(__timer_##timer_name)
# define TIMER_PRINT st_timer_print_all()
# define TIMER_START( timer_name )
# define TIMER_STOP( timer_name )
# define TIMER_RESET( timer_name )
# define TIMER_ELAPSED( timer_name )
# define TIMER_PRINT
# define TIMER_FG_START( timer_name ) st_timer_start(__timer_##timer_name)
# define TIMER_FG_STOP( timer_name ) st_timer_stop_and_accum(__timer_##timer_name)
# define TIMER_FG_RESET( timer_name ) st_timer_reset(__timer_##timer_name)
# define TIMER_FG_ELAPSED( timer_name ) st_timer_get_elapsed(__timer_##timer_name)
# define TIMER_FG_PRINT st_timer_print_all()
# define TIMER_FG_START( timer_name )
# define TIMER_FG_STOP( timer_name )
# define TIMER_FG_RESET( timer_name )
# define TIMER_FG_ELAPSED( timer_name )
# define TIMER_FG_PRINT

int st_timer_start(timer timer);
int st_timer_stop_and_accum(timer timer);
void st_timer_reset(timer timer);
void st_timer_print_all(void);
unsigned long st_timer_get_elapsed(timer timer);


############################################################### unwind.h:
APIs for unwinding/un-unwinding stack frame activations. It provides
functions to manage unwinding information in the st_handle



**** Contents:
void setup_frame_info(rewrite_context ctx);
void setup_frame_info_funcentry(rewrite_context ctx);
void pop_frame(rewrite_context ctx);
void pop_frame_funcentry(rewrite_context ctx);
void* get_register_save_loc(rewrite_context ctx,
void free_activation(st_handle handle, activation* act);
bool first_frame(uint64_t id);


############################################################### util.h:
Utility functions needed to navigate and collect meta-data from binary 

**** Contents:
const char* arch_name(uint16_t arch);
regops_t get_regops(uint16_t arch);
properties_t get_properties(uint16_t arch);
Elf_Scn* get_section(Elf* e, const char* sec);
int64_t get_num_entries(Elf* e, const char* sec);
const void* get_section_data(Elf* e, const char* sec);
bool get_site_by_addr(st_handle handle, void* ret_addr, call_site* site);
bool get_site_by_id(st_handle handle, uint64_t csid, call_site* site);
bool get_unwind_offset_by_addr(st_handle handle, void* addr, unwind_addr* meta);



############################################################### arch/x86_64/internal.h:

**** Contents:
extern struct properties_t properties_x86_64;
extern struct regops_t regs_x86_64;

############################################################### arch/aarch64/internal.h:

**** Contents:
extern struct properties_t properties_aarch64;
extern struct regops_t regs_aarch64;

############################################################### arch/x86_64/reg.h:
Register definitions and macros for access for x86-64. Uses extended asm 
for getters & setters

**** Contents:
struct regset_x86_64
getter & setter define directives for all the registers

############################################################### arch/aarch64/reg.h:
Analogous to arch/x86_64/reg.h





