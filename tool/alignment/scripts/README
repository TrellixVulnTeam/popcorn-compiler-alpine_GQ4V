Alignment
=========

FOR HETEROGENEOUS BINARIES
Run with:

$ cd src
$ javac *.jav
$ java genericAlignment $(TARGET_DIR)

It should create the 2 binaries:

DO NOT USE THESE
 - x86exe_musl (Not aligned, x86 version)
 - armexe_musl (Not Aligned, ARM version)

USE THESE !!!
 - x86BinGold_musl (Heterogeneous Aligned, x86 version)
 - armBinGold_musl (Heterogeneous Aligned, ARM version)


SO If you want to incrementally RUN THINGS TO SEE EACH STEP
The Java tool is needed as it performs the logic behind aligning
symbols for the heterogeneous ISA binary. Running the scripts ALONE
will NOT accomplish an ALIGNED heterogeneous binary.

----------------------
DEFAULT LINKER FILES
----------------------
elf_x86_64.x
aarch64linux.x

Purpose: These files are templates for the alignment component when
creating the custom linker scripts needed to align all symbols and
data in the resulting executables for the architectures currently
supported (more to come hopefully). These files are populated with
symbol section and additional alignment rules to ensure all
executables have symbols conformed to be at the same address.

DO NOT MODIFY THESE LINKER FILES !!!

SCRIPTS + Description
==============================================================
generateObjs_gcc.sh

Purpose: Generates Native object files for each architecture and
produces a text file keeping track of the objects generated that 
will need to be linked together at the linking stage. This script
has 2 modes, toggling between using a NATVE-only (homogeneous)
compilation of
the migration function (using "jmp") and a HETEROGENEOUS compilation
of the migration function (which actually calls the syscall).

USAGE:
$ ./generateObjs_gcc.sh ($MODE)

$MODE = 0 : Toggle for NATIVE (homogeneous) compilation of the target
            application source files. (use jmp implementation)

$MODE = 1 : Toggle for HETEROGENEOUS compilation of the target application
            source files. (use syscall implementation)

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
clean.sh

Purpose: Clean the target application directory of the intermediate
files generated during compilation. By default in a production version
of the compiler framework this script is enabled with maximum cleaning
effect ($MODE = 4)

USAGE:
$ ./clean ($MODE)

$MODE = 0 : Removes ALL text files Only

$MODE = 1 : Removes text + Intermediate Binaries 

$MODE = 2 : Removes text + Inter. Binaries + Object Files

$MODE = 3 : Removes text + Inter. Binaries + Obj. Files + Linker Scripts

$MODE = 4 : Removes text + Inter. Binaries + Obj. Files + Linker Scpt + Final Binaries


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
getSymbols.sh

Purpose: Generates a list of symbols from the objects generated from the
generateObjs_gcc.sh script for all architectures

USAGE:
$ ./getSymbols.sh

Assumptions: The generateObjs_gcc.sh script has been successfully executed.

OUTPUT:
nm_symbols_ARCH.txt, where ARCH is the architecture the objects were compiled for

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
mlink_x86Objs.sh
mlink_armObjs.sh

Purpose: To perform the linking step of compilation, to form a binary.
These scripts also have two modes of operation of whether the binary being
generated should have its symbols aligned and follow a custom linker scripts
directions or to just perform default method of adding symbols to a binary.

Assumptions: If $MODE = 1, a generated modified linker script exists in
the same directory as this scipt.

USAGE:
./mlink_x86.sh ($MODE) ($FUNCS) ($OBJS)

$MODE = 0 : The Binary will NOT be aligned. It will be called ARCHexe_musl

$MODE = 1 : The Binary WILL be aligned. It will be called ARCHBinGold_musl

$FUNCS = ?? : Here is a list of target functions that should be wrapped as
they need the functionality to migration between architectures.
In the future this may be represented as a text file, with one function per
line.

$OBJS = objs_ARCH.txt : This is a text file that contains the list of object
files that should be linked together in order to form the binary.

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
readMyElfToFile.sh

Purpose: Generates a text file that gives information on the address
location and size of various sections for a given binary. This is
used by the Java tool to know the range of addresses that are valid
when searching for symbols in a given binary.

USAGE:
./readMyElfToFile.sh ($MODE)

$MODE = 3 : The binaries looked at are and the respective text files
with the generated information are:
    x86exe_musl >>> readelf_x86n.txt
    armexe_musl >>> readelf_aRMn.txt

$MODE = 4 : Same thing as $MODE = 3 but binaries looked at are
    x86BinGold_musl >>> readelf_x86n.txt
    armBinGold_musl >>> readelf_aRMn.txt


    
