###############################################################################
#                                                                             #
#                                  FIXME's                                    #
#                                                                             #
#   Fill in these variables with system & application-specific information.   #
#                                                                             #
###############################################################################

# FIXME directory of Popcorn compiler installation
POPCORN := /usr/local/popcorn

# FIXME directory of libgcc & libgcc_eh for aarch64 compiler
ARM64_LIBGCC := $(shell dirname \
                $(shell aarch64-linux-gnu-gcc -print-libgcc-file-name))

# FIXME name of the generated executable
BIN := test

# FIXME specify source files
SRC := $(shell ls *.c)

APP_DIR := $(shell pwd)

###############################################################################
#                  Compiler toolchain & command-line flags                    #
###############################################################################

# Compiler
CC         := $(POPCORN)/bin/clang
CXX        := $(POPCORN)/bin/clang++
CFLAGS     := -O0 -Wall -nostdinc -g
HET_CFLAGS := $(CFLAGS) -popcorn-migratable -fno-common \
              -ftls-model=initial-exec

IR := $(SRC:.c=.ll)

# Linker
LD      := $(POPCORN)/bin/ld.gold
LDFLAGS := -z relro --hash-style=gnu --build-id -static
LIBS    := /lib/crt1.o \
           /lib/libc.a \
           /lib/libmigrate.a \
           /lib/libstack-transform.a \
           /lib/libelf.a \
           /lib/libpthread.a \
           /lib/libc.a \
           /lib/libm.a
LIBGCC  := --start-group -lgcc -lgcc_eh --end-group

# Alignment
# TODO remove dependencies on external scripting
ALIGN         := $(POPCORN)/bin/align
SCRIPTS       := $(POPCORN)/lib/scripts
ALIGN_BUILD   := align
ALIGN_SCRIPTS := $(ALIGN_BUILD)/readMyElfToFile.sh \
                 $(ALIGN_BUILD)/nmScript.sh \
                 $(ALIGN_BUILD)/mlink_armObjs.sh \
                 $(ALIGN_BUILD)/mlink_x86Objs.sh \
                 $(ALIGN_BUILD)/aarch64linux.x \
                 $(ALIGN_BUILD)/elf_x86_64.x
ALIGN_BINS    := $(ALIGN_BUILD)/armexe_musl $(ALIGN_BUILD)/x86exe_musl
ALIGN_MAPS    := $(ALIGN_BUILD)/map_aarch.txt $(ALIGN_BUILD)/map_x86.txt
ALIGN_OBJ     := $(ALIGN_BUILD)/obj_arm.txt $(ALIGN_BUILD)/obj_x86.txt
ALIGN_SYMBOLS := $(ALIGN_BUILD)/nm_symbols_aarch64.txt \
                 $(ALIGN_BUILD)/nm_symbols_x86.txt

# Post-processing & checking
POST_PROCESS   := $(POPCORN)/bin/gen-stackinfo
ALIGN_CHECK    := $(POPCORN)/bin/check-align.py
STACKMAP_CHECK := $(POPCORN)/bin/check-stackmaps

###########
# AArch64 #
###########

# Locations
ARM64_POPCORN := $(POPCORN)/aarch64
ARM64_BUILD   := build_aarch64

# Generated files
ARM64_ALIGNED   := $(BIN)_aarch64
ARM64_VANILLA   := $(ARM64_BUILD)/$(ARM64_ALIGNED)
ARM64_OBJ       := $(SRC:.c=.o)
ARM64_MAP       := $(ARM64_BUILD)/map.txt
ARM64_LD_SCRIPT := $(ALIGN_BUILD)/modified__aarch64.x

# Flags
ARM64_TARGET  := aarch64-linux-gnu
ARM64_INC     := -isystem $(ARM64_POPCORN)/include
ARM64_LDFLAGS := -m aarch64linux -L$(ARM64_POPCORN)/lib -L$(ARM64_LIBGCC) \
                 $(addprefix $(ARM64_POPCORN),$(LIBS)) $(LIBGCC)

##########
# x86-64 #
##########

# Locations
X86_64_POPCORN  := $(POPCORN)/x86_64
X86_64_BUILD    := build_x86-64
X86_64_SD_BUILD := sd_x86-64

# Generated files
X86_64_ALIGNED   := $(BIN)_x86-64
X86_64_VANILLA   := $(X86_64_BUILD)/$(X86_64_ALIGNED)
X86_64_OBJ       := $(SRC:.c=_x86_64.o)
X86_64_MAP       := $(X86_64_BUILD)/map.txt
X86_64_LD_SCRIPT := $(ALIGN_BUILD)/modified__elf_x86_64.x
X86_64_SD        := $(X86_64_SD_BUILD)/$(X86_64_ALIGNED)
X86_64_SD_OBJ    := $(addprefix $(X86_64_SD_BUILD)/,$(SRC:.c=.o))

# Flags
X86_64_TARGET  := x86_64-linux-gnu
X86_64_INC     := -isystem $(X86_64_POPCORN)/include
X86_64_LDFLAGS := -m elf_x86_64 -L$(X86_64_POPCORN)/lib \
                  $(addprefix $(X86_64_POPCORN),$(LIBS)) \
                  --start-group --end-group

###############################################################################
#                                 Recipes                                     #
###############################################################################

all: post_process

ir: $(IR)

check: $(ARM64_ALIGNED) $(X86_64_ALIGNED)
	@echo " [CHECK] Checking stackmaps for $^"
	@$(STACKMAP_CHECK) -a $(ARM64_ALIGNED) -x $(X86_64_ALIGNED)
	@echo " [CHECK] Checking alignment for $^"
	@$(ALIGN_CHECK) $(ARM64_ALIGNED) $(X86_64_ALIGNED)

post_process: $(ARM64_ALIGNED) $(X86_64_ALIGNED)
	@echo " [POST_PROCESS] $^"
	@$(POST_PROCESS) -f $(ARM64_ALIGNED)
	@$(POST_PROCESS) -f $(X86_64_ALIGNED)

stack-depth: $(X86_64_SD)

aligned: $(ARM64_ALIGNED) $(X86_64_ALIGNED)
aligned-aarch64: $(ARM64_ALIGNED)
aligned-x86-64: $(X86_64_ALIGNED)

vanilla: $(ARM64_VANILLA) $(X86_64_VANILLA)
vanilla-aarch64: $(ARM64_VANILLA)
vanilla-x86-64: $(X86_64_VANILLA)

clean:
	@echo " [CLEAN] $(ARM64_ALIGNED) $(ARM64_BUILD) $(X86_64_ALIGNED) $(X86_64_BUILD) $(X86_64_SD_BUILD) $(ALIGN_BUILD) *.ll *.o"
	@rm -rf $(ARM64_ALIGNED) $(ARM64_BUILD) $(X86_64_ALIGNED) $(X86_64_BUILD) $(X86_64_SD_BUILD) $(ALIGN_BUILD) *.ll *.o

%.dir:
	@echo " [MKDIR] $*"
	@mkdir -p $*
	@touch $@

# TODO remove dependencies on external scripting
$(ALIGN_BUILD)/readMyElfToFile.sh: $(SCRIPTS)/readMyElfToFile.sh $(ALIGN_BUILD)/.dir
	@cp $< $@
$(ALIGN_BUILD)/nmScript.sh: $(SCRIPTS)/nmScript.sh $(ALIGN_BUILD)/.dir
	@cp $< $@
$(ALIGN_BUILD)/mlink_armObjs.sh: $(SCRIPTS)/mlink_armObjs.sh $(ALIGN_BUILD)/.dir
	@cp $< $@
$(ALIGN_BUILD)/mlink_x86Objs.sh: $(SCRIPTS)/mlink_x86Objs.sh $(ALIGN_BUILD)/.dir
	@cp $< $@
$(ALIGN_BUILD)/aarch64linux.x: $(SCRIPTS)/aarch64linux.x $(ALIGN_BUILD)/.dir
	@cp $< $@
$(ALIGN_BUILD)/elf_x86_64.x: $(SCRIPTS)/elf_x86_64.x $(ALIGN_BUILD)/.dir
	@cp $< $@
$(ALIGN_BUILD)/armexe_musl: $(ARM64_VANILLA) $(ALIGN_BUILD)/.dir
	@cp $< $@
$(ALIGN_BUILD)/x86exe_musl: $(X86_64_VANILLA) $(ALIGN_BUILD)/.dir
	@cp $< $@
$(ALIGN_BUILD)/map_aarch.txt: $(ARM64_VANILLA) $(ALIGN_BUILD)/.dir
	@cp $(ARM64_MAP) $@
$(ALIGN_BUILD)/map_x86.txt: $(X86_64_VANILLA) $(ALIGN_BUILD)/.dir
	@cp $(X86_64_MAP) $@
$(ALIGN_BUILD)/obj_arm.txt: $(ARM64_OBJ) $(ALIGN_BUILD)/.dir
	@echo "$(addprefix $(APP_DIR)/,$(ARM64_OBJ))" > $@
$(ALIGN_BUILD)/obj_x86.txt: $(X86_64_OBJ) $(ALIGN_BUILD)/.dir
	@echo "$(addprefix $(APP_DIR)/,$(X86_64_OBJ))" > $@
$(ALIGN_BUILD)/nm_symbols_aarch64.txt: $(ARM64_OBJ) $(ALIGN_BUILD)/.dir
	@for f in $(ARM64_OBJ); do aarch64-linux-gnu-nm --numeric-sort $$f >> $@; done
$(ALIGN_BUILD)/nm_symbols_x86.txt: $(X86_64_OBJ) $(ALIGN_BUILD)/.dir
	@for f in $(X86_64_OBJ); do nm --numeric-sort $$f >> $@; done

##########
# Common #
##########

%.ll: %.c
	@echo " [IR] $<"
	@$(CC) $(HET_CFLAGS) -S -emit-llvm $(ARM64_INC) -o $@ $<

%.o: %.c
	@echo " [CC] $<"
	@$(CC) $(HET_CFLAGS) -c $(ARM64_INC) -o $@ $<

###########
# AArch64 #
###########

$(ARM64_VANILLA): $(ARM64_BUILD)/.dir $(ARM64_OBJ)
	@echo " [LD] $@ (vanilla)"
	@$(LD) -o $@ $(ARM64_OBJ) $(LDFLAGS) $(ARM64_LDFLAGS) -Map $(ARM64_MAP)

$(ARM64_LD_SCRIPT): $(ALIGN_BUILD)/.dir \
                    $(ALIGN_SCRIPTS) \
                    $(ALIGN_BINS) \
                    $(ALIGN_MAPS) \
                    $(ALIGN_OBJ) \
                    $(ALIGN_SYMBOLS)
	@echo " [ALIGN] $@"
	@$(ALIGN) 1 $(APP_DIR) -skip-vanilla > $(APP_DIR)/$(ALIGN_BUILD)/align.txt
	@if [ "`grep 'FAILURE' $(APP_DIR)/$(ALIGN_BUILD)/align.txt`" != "" ]; then \
		echo "Align failed -- see $(ALIGN_BUILD)/align.txt"; \
		false; \
	fi

$(ARM64_ALIGNED): $(ARM64_LD_SCRIPT)
	@echo " [LD] $@ (aligned)"
	@$(LD) -o $@ $(ARM64_OBJ) $(LDFLAGS) $(ARM64_LDFLAGS) -Map $(ARM64_MAP) -T $<

##########
# x86-64 #
##########

$(X86_64_VANILLA): $(X86_64_BUILD)/.dir $(X86_64_OBJ)
	@echo " [LD] $@ (vanilla)"
	@$(LD) -o $@ $(X86_64_OBJ) $(LDFLAGS) $(X86_64_LDFLAGS) -Map $(X86_64_MAP)

$(X86_64_LD_SCRIPT): $(ALIGN_BUILD)/.dir \
                     $(ALIGN_SCRIPTS) \
                     $(ALIGN_BINS) \
                     $(ALIGN_MAPS) \
                     $(ALIGN_OBJ) \
                     $(ALIGN_SYMBOLS) \
                     $(ARM64_LD_SCRIPT)
	@echo " [ALIGN] $@"

$(X86_64_ALIGNED): $(X86_64_LD_SCRIPT)
	@echo " [LD] $@ (aligned)"
	@$(LD) -o $@ $(X86_64_OBJ) $(LDFLAGS) $(X86_64_LDFLAGS) -Map $(X86_64_MAP) -T $<

# Stack-depth builds
$(X86_64_SD_BUILD)/%.o: %.c
	@echo " [CC (x86-64)] $< (stack depth)"
	@$(CC) -target $(X86_64_TARGET) $(CFLAGS) -finstrument-functions -c $(X86_64_INC) -o $@ $<

$(X86_64_SD): $(X86_64_SD_BUILD)/.dir $(X86_64_SD_OBJ)
	@echo " [LD] $@ (stack depth)"
	@$(CXX) -static -L$(POPCORN)/lib -o $@ $(X86_64_SD_OBJ) -lstack-depth

.PHONY: all post_process stack-depth clean \
        aligned aligned-aarch64 aligned-x86-64 \
        vanilla vanilla-aarch64 vanilla-x86-64
